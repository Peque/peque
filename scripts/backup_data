#!/bin/bash


#
#  backup_data
#
#  Copyright 2013 Miguel Sánchez de León Peque <msdeleonpeque@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#


#
# description:
#   Put this in ~/.bash_profile:
#
# usage:
#   $ <path_to_backup_file>/backup_data &
#


# Check internet connection for 5 minutes, each 5 seconds
for (( i=0; i<60; i++ )); do
	if [[ $(ping -c 1 google.com 2> /dev/null) != "" ]]; then
		break
	else
		sleep 5
	fi
done


# Backup period
export period_weeks=1
export period_days=0
export period_hours=0
export period_mins=0
# Backup server configuration
export backup_protocol="protocol"
export backup_user="user"
export backup_port="port"
# Local folder (absolute path, with trailing slash)
export local_folder="/local/folder/"
# Remote folder (absolute path, with trailing slash)
export remote_folder="/remote/folder/"
# Exclude pattern
export exclude=".Trash*"
# Backup reg file
export backup_reg_file=~/.backup_reg
# Server test timeout (seconds)
export nc_timeout=2

# Information about the host IP and its encryption
backup_host_ip_url="http://domain.com/path/to/ip/file"
backup_host_ip_dec_pass="encryption_password"
export backup_host=$(echo $(curl -s $backup_host_ip_url) | openssl enc -aes-256-cbc -a -d -salt -pass pass:$backup_host_ip_dec_pass)


# If the register file does not exists or it is empty or the last line
# in it has a wrong value, recreate it
last_backup_date=$(cat $backup_reg_file 2>/dev/null | tail -n 1 | grep -e "^[0-9]*$")
if [[ $last_backup_date == "" ]]; then
	echo "Initializating the register file"
	touch ~/.backup_reg
	echo "#####################################"> $backup_reg_file
	echo "# Do not edit this file manually !! #">> $backup_reg_file
	echo "#####################################">> $backup_reg_file
	last_backup_date=0
fi

# Start backup, if necessary (according to the backup period)
todays_date=$(date +%s)
date_diff=$(($todays_date-$last_backup_date))
min_diff=$(($period_weeks*7*24*60*60 + $period_days*24*60*60 + $period_hours*60*60 + $period_mins*60))
if [ $date_diff -lt $min_diff ]; then
	exit 0
fi

gnome-terminal -x sh -c '

# Ask the user for confirmation before starting the backup
echo "You may want to start a data security backup..."
printf "Do you want to do it now? (y/n): "
read a
if [[ $a != "Y" && $a != "y" ]]; then
	echo "0">> $backup_reg_file
	echo "Aborted!"
	read a
	exit 0
fi

# Testing and mounting the remote share
echo "Testing remote share availability..."
while [[ $(nc $backup_host $backup_port -i $nc_timeout -w $nc_timeout 2>/dev/null) == "" ]]; do
	echo "Connection timeout. The remote server may be down!"
	echo -n "Do you want to retry connection? (y/n): "
	read a
	if [[ $a != "Y" && $a != "y" ]]; then
		echo "0">> $backup_reg_file
		echo "Aborted!"
		read a
		exit 0
	fi
	(( nc_timeout *= 2 ))
	echo "Retrying connection..."
done

# Adding remote share to the known hosts
ssh_key=$(ssh-keyscan -p $backup_port $backup_host 2> /dev/null)
if [[ $(cat ~/.ssh/known_hosts | grep "$ssh_key") == "" ]]; then
	echo "WARNING! remote host identification:"
	echo $ssh_key
	echo -n "Do you want to permanently add this host to the list of known hosts? (y/n): "
	read a
	if [[ $a != "Y" && $a != "y" ]]; then
		echo "Aborted!"
		read a
		exit 0
	fi
	echo "$ssh_key" >> ~/.ssh/known_hosts
fi

echo "Mounting remote share..."
gvfs-mount $backup_protocol\:\/\/$backup_user@$backup_host\:$backup_port

# Starting the backup
echo "Executing 'rsync'..."
rsync -r -v --progress --delete --size-only -l -s --exclude $exclude "$local_folder" "/run/user/$UID/gvfs/$backup_protocol:host=$backup_host,port=$backup_port,user=$backup_user$remote_folder"
printf "Did the process finish successfuly? (y/n): "
read a
if [[ $a == "Y" || $a == "y" ]]
	then
		echo "The security backup process will be executed again after $period_weeks weeks $period_days days $period_hours hours $period_mins mins"
		echo "$(date +%s)" >> $backup_reg_file
	else
		echo "The security backup process will be executed again next time"
		echo "0" >> $backup_reg_file
fi

# Unmounting the remote share
echo "Unmounting remote share..."
gvfs-mount -u $backup_protocol\:\/\/$backup_user@$backup_host\:$backup_port

printf "Press ENTER to finish..."
read a

'
